{"componentChunkName":"component---src-templates-blog-post-js","path":"/post/explain-regular-expressions-like-im-five","result":{"data":{"blogPost":{"name":"Explain Regular Expressions Like I'm Five","content":"<h2 id=\"about\">About</h2>\n<p>Browsing Twitter, especially in the #100DaysOfCode and #CodeNewbie hashtags, you'd be sure to soon find someone struggling with Regular Expressions, or \"regex\" - and for good reason. Even experienced software developers are on the same boat. I'm with you. Regex, still makes me dizzy even after years of using it.</p>\n<p>Thus, here is my attempt at an \"Explain Like I'm Five\" for regex:</p>\n<h2 id=\"okaykidsletsbegin\">Okay kids, let's begin.</h2>\n<p>Regular expressions are a way of finding specific parts of something written. A bit like finding a specific part of a story book, or a certain word in a song.</p>\n<p>Actually let's do this now: let's begin with a random song:</p>\n<blockquote>\n  <p>Twinkle twinkle little star,\n  How I wonder what you are!\n  Up above the world so high!\n  Like a diamond in the sky!</p>\n</blockquote>\n<p>Let's find some words:</p>\n<h3 id=\"1findthewordstarinthesong\">1: Find the word \"star\" in the song</h3>\n<blockquote>\n  <p>Twinkle twinkle little [star]👈,\n  How I wonder what you are!\n  Up above the world so high!\n  Like a diamond in the sky!</p>\n</blockquote>\n<p>Here it is, right there! On the first line of our song. That was easy!</p>\n<p>Now let's try something else: </p>\n<h3 id=\"2findeverycharacterthatsnotaletter\">2: Find every character that's not a letter!</h3>\n<blockquote>\n  <p>Twinkle twinkle little star[,]👈\n  How I wonder what you are[!]👈\n  Up above the world so high[!]👈\n  Like a diamond in the sky[!]👈</p>\n</blockquote>\n<p>Now <em>that</em> looked a little bit more complex than our first exercise. But it wasn't too difficult, was it?</p>\n<p>The reason you found it slightly more difficult was because you weren't looking for a specific word this time. You were looking for something else more general. You were looking at a… <strong>PATTERN!</strong></p>\n<p>You know patterns, right? They're on the shirt you're wearing, outside on the trees and leaves. They're everywhere!</p>\n<p>Now let's try one more: </p>\n<h3 id=\"3findeverywordinthesongthatis3lettersorless\">3. Find every word in the song that is 3 letters or less:</h3>\n<blockquote>\n  <p>Twinkle twinkle little star,\n  [How]👈 [I]👈 wonder what [you]👈 [are]👈!\n  [Up]👈 above [the]👈 world [so]👈 high!\n  Like [a]👈 diamond [in]👈 [the]👈 [sky]👈!</p>\n</blockquote>\n<p><em>Whoa</em>! Now that was quite a bit more involved wasn't it? Go ahead and try it yourself! </p>\n<h2 id=\"codetalk\">Code talk</h2>\n<p>Now that you're familiarised yourself with the concept of \"patterns\" let's talk code. For this article, we're going to be coding in Javascript, but the expressions are exactly the same in all languages!</p>\n<p>So say, you need to express some complex patterns in code. </p>\n<h3 id=\"findthewordstar\">Find the word \"star\"</h3>\n<p>Firstly, let's find the word star in the \"Twinkle Twinkle Little Star\" song, and replace it with \"⭐\". You probably already know how to do this. It's quite simple:</p>\n<p>First let's store our poem as a variable:</p>\n<pre><code class=\"javascript language-javascript\">var poem = `Twinkle twinkle little star,\nHow I wonder what you are!\nUp above the world so high!\nLike a diamond in the sky!`\n</code></pre>\n<p>Now let's replace our text using the <code>replace()</code> function:</p>\n<pre><code class=\"javascript language-javascript\">poem = poem.replace(\"star\", \"⭐\")\nconsole.log(poem)\n</code></pre>\n<p>This will be the output:</p>\n<pre><code>Twinkle twinkle little ⭐,\nHow I wonder what you are!\nUp above the world so high!\nLike a diamond in the sky!\n</code></pre>\n<p>Hurray 🎉🎉. Just what we need!</p>\n<h3 id=\"findeverycapitalletterinthesong\">Find every capital letter in the song</h3>\n<p>Now we're starting to look for patterns, not just certain words. We could possibly iterate through every letter in every word and compare it to every capital letter in the English alphabet, but that's painful to even think about. Let's instead use a magical tool called <strong>REGULAR EXPRESSIONS</strong>!</p>\n<p>Basically you need a way to tell your application \"find any letter between A to Z (capitals)\". The regular expression to express this is this:</p>\n<pre><code class=\"regex language-regex\">[A-Z]\n</code></pre>\n<p>That's it! Now let's use Javascript to replace every capital letter with a \"❤️\":</p>\n<pre><code class=\"javascript language-javascript\">var poem = `Twinkle twinkle little star,\nHow I wonder what you are!\nUp above the world so high!\nLike a diamond in the sky!`\n\npoem = poem.replace(/[A-Z]/g, \"❤️\")\nconsole.log(poem)\n</code></pre>\n<p>And here's the output:</p>\n<pre><code>❤️winkle twinkle little star,\n❤️ow ❤️ wonder what you are!\n❤️p above the world so high!\n❤️ike a diamond in the sky!\n</code></pre>\n<h3 id=\"findeverysmallletterinthesong\">Find every small letter in the song</h3>\n<p>In the exact same way, we can find all small letters, but the expression this time is this:</p>\n<pre><code class=\"regex language-regex\">[a-z]\n</code></pre>\n<p>Let's use Javascript to replace all small letters with \"🐶\":</p>\n<pre><code class=\"javascript language-javascript\">var poem = `Twinkle twinkle little star,\nHow I wonder what you are!\nUp above the world so high!\nLike a diamond in the sky!`\n\npoem = poem.replace(/[a-z]/g, \"🐶\")\nconsole.log(poem)\n</code></pre>\n<p>Output:</p>\n<pre><code>T🐶🐶🐶🐶🐶🐶 🐶🐶🐶🐶🐶🐶🐶 🐶🐶🐶🐶🐶🐶 🐶🐶🐶🐶,\nH🐶🐶 I 🐶🐶🐶🐶🐶🐶 🐶🐶🐶🐶 🐶🐶🐶 🐶🐶🐶!\nU🐶 🐶🐶🐶🐶🐶 🐶🐶🐶 🐶🐶🐶🐶🐶 🐶🐶 🐶🐶🐶🐶!\nL🐶🐶🐶 🐶 🐶🐶🐶🐶🐶🐶🐶 🐶🐶 🐶🐶🐶 🐶🐶🐶!\n</code></pre>\n<p>I hope these make sense by now.</p>\n<h3 id=\"acoupleofnotes\">A couple of notes</h3>\n<p>Before we continue to our final example, let's clarify a few stuff:</p>\n<ul>\n<li><p>Notice how the letters in th regular expression are inside square brackets <code>[]</code>? In regex, this simply means \"any character from series of characters\":</p></li>\n<li><p><code>[A-Z]</code> means any letter A-Z</p></li>\n<li><p><code>[a-z]</code> means any letter a-z</p></li>\n<li><p><code>[0-9]</code> means any number 0-9</p></li>\n<li><p><code>[A-Za-z0-9]</code> means any character, either capital letter, small letter or number</p></li>\n<li><p>Notice how in the Javascript code, the regex starts with <code>/</code> and ends with <code>/g</code>? This simply means \"find <em>everything</em> in the text\" (rather than just the first instance). There are more you can use. For example <code>/i</code> means the search is \"case-insensitive\".</p></li>\n</ul>\n<h3 id=\"finalexamplefindwordsthatare3lettersorlessandreplacethemwith\">Final example: Find words that are 3 letters or less and replace them with \"🍕\".</h3>\n<p>This is more complex, but I'll explain. The expression for this pattern is this:</p>\n<pre><code class=\"regex language-regex\">\\b[A-Za-z]{1,3}\\b\n</code></pre>\n<p>I can see you shaking your head and gasping so let's break this down:</p>\n<ul>\n<li>First, the familiar territory. Notice the <code>[A-Za-z]</code> there? If you remember, this means any letter capital or small. So far so good right?</li>\n<li>Next to it, you see <code>{1,3}</code>. This simply means the pattern before it should be repeated between 1 and 3 times. Basically anywhere 1 to 3 letters appear next to each other. So, the words we need!</li>\n<li>Lastly, there's <code>\\b</code> in each end. This simply means \"word boundaries\". In other words, ignore half-words that happen to contain 1 to 3 letters in them.</li>\n</ul>\n<p>In summary, the pattern above basically means: \"Find characters that have 1 to 3 capital or small letters, that are surrounded by word bounderies\". <em>Exactly</em> what we need.</p>\n<p>Let's now use Javascript to replace these small words with \"🍕\"!</p>\n<pre><code class=\"javascript language-javascript\">var poem = `Twinkle twinkle little star,\nHow I wonder what you are!\nUp above the world so high!\nLike a diamond in the sky!`\n\npoem = poem.replace(/\\b[A-Za-z]{1,3}\\b/g, \"🍕\")\nconsole.log(poem)\n</code></pre>\n<p>And here's the output:</p>\n<pre><code>Twinkle twinkle little star,\n🍕 🍕 wonder what 🍕 🍕!\n🍕 above 🍕 world 🍕 high!\nLike 🍕 diamond 🍕 🍕 🍕!\n</code></pre>\n<p>🎉🎉 WHOOP WHOOP! 🎉🎉 We made it!</p>\n<h2 id=\"thatisallfornow\">That is all for now</h2>\n<p>I hope all this makes sense. I've only scratched the surface because there's a WHOLE lot more to regex, but I hope the basics make sense enough to get you started. Let me know how you found this article and happy regexing!</p>\n<p>To learn more about regular expressions, <a href=\"https://www.rexegg.com/regex-quickstart.html\">here's a very useful cheat sheet</a>.</p>"}},"pageContext":{"slug":"explain-regular-expressions-like-im-five"}}}